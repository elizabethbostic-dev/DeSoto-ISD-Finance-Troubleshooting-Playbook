<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DeSoto ISD Finance Command Center: Playbook</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Load Lucide icons for visual flair -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /* Define the Inter font family */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f9fc;
            scroll-behavior: smooth;
        }
        /* Custom scrollbar for aesthetics */
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        /* Style for the fixed header button */
        .back-to-menu-btn {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.06);
        }
    </style>
</head>
<body class="min-h-screen">

    <!-- Global Data Store -->
    <script>
        const playbookData = [
            {
                id: 'payroll',
                name: 'Payroll',
                leader: 'Ana Garcia',
                icon: 'receipt',
                color: 'blue',
                problems: [
                    {
                        if: 'Paycheck is wrong, hours missing, or leave not applied',
                        then: '→ Payroll (Ana Garcia) handles the fix. Ana or her designee verifies the timecard, unlocks it if needed, and corrects pay for the next cycle.',
                        nowWhat: 'Campus leaders should document the cause. If it happens more than once, report pattern to Budget (Bessye) for workflow accountability. Notify Grants (Bostic) if the employee is funded through a special revenue source — timing affects compliance drawdowns.'
                    },
                    {
                        if: 'Timecard says “P” or didn’t move to “A”',
                        then: '→ Payroll (Ana Garcia) verifies the timecard status and manually pushes it forward or requests immediate approval from the supervisor.',
                        nowWhat: 'Supervisor must complete a retro correction. CFO notified if 2+ missed deadlines occur — triggers campus workflow review.'
                    }
                ]
            },
            {
                id: 'purchasing',
                name: 'Purchasing / Accounts Payable',
                leader: 'Saundra Scott',
                icon: 'file-text',
                color: 'green',
                problems: [
                    {
                        if: 'A vendor calls saying they haven’t been paid.',
                        then: '→ Purchasing/AP (Saundra Scott) investigates the chain. Saundra confirms receipt of the invoice, checks for missing documentation, or verifies if the payment batch was processed.',
                        nowWhat: 'If documentation was missing, campus must resubmit with complete backup (quote, receipt, purpose). Repeat offenders → notification to Budget (Bessye) for corrective action support.'
                    },
                    {
                        if: 'You submitted a requisition but haven’t seen a PO yet.',
                        then: '→ Purchasing/AP (Saundra Scott) checks the requisition status in the system (e.g., Skyward) to identify the approval bottleneck.',
                        nowWhat: 'If the purchase was made before the PO, Procurement (Michael Smith) and Saundra are looped in to fix compliance. PD follow-up for principal & secretary on proper requisition timing.'
                    }
                ]
            },
            {
                id: 'procurement',
                name: 'Procurement',
                leader: 'Michael Smith',
                icon: 'shopping-cart',
                color: 'yellow',
                problems: [
                    {
                        if: 'You don’t know whether you need quotes or bids.',
                        then: '→ Procurement (Michael Smith) provides the rules and sourcing. Michael interprets purchasing policy, board limits, and determines sourcing requirements.',
                        nowWhat: 'Procurement ensures proper documentation is filed before spending occurs. If policy was violated, file must go to AP and Accounting for after-action compliance documentation.'
                    },
                    {
                        if: 'A vendor isn’t on the approved list or you want to use a cooperative (BuyBoard, TIPS, etc.).',
                        then: '→ Procurement (Michael Smith) provides the rules and sourcing. Michael interprets policy to determine if the vendor or cooperative is compliant for use.',
                        nowWhat: 'Use as a teachable moment in next PD cycle to prevent repeat errors. If the purchase was made, denial of reimbursement unless proper documentation is fixed.'
                    }
                ]
            },
            {
                id: 'budget',
                name: 'Budget',
                leader: 'Bessye Adams',
                icon: 'bar-chart',
                color: 'red',
                problems: [
                    {
                        if: 'You overspent a line, or you need to move funds/reallocate within your budget.',
                        then: '→ Budget (Bessye Adams) owns the numbers. Bessye validates funding availability and approves budget amendments.',
                        nowWhat: 'If it affects staffing or grants, Bessye coordinates with Payroll and Grants for alignment. If it’s a pattern of overspending → escalate to CFO (McSwain) for correction plan and PD reinforcement.'
                    },
                    {
                        if: 'A department wants to add a new expense mid-year that requires new funding.',
                        then: '→ Budget (Bessye Adams) validates funding source availability and checks alignment with strategic goals before amendment approval.',
                        nowWhat: 'If approved, Bessye coordinates with CFO for final sign-off. If denied, documentation of rationale is required.'
                    }
                ]
            },
            {
                id: 'grants',
                name: 'Grants / Special Revenue',
                leader: 'Elizabeth Bostic',
                icon: 'award',
                color: 'purple',
                problems: [
                    {
                        if: 'You’re not sure a purchase is allowable, or payroll split between local and grant is off.',
                        then: '→ Grants (Elizabeth Bostic) ensures compliance and alignment. Elizabeth cross-references expenditures/coding with TEA/EDGAR principles.',
                        nowWhat: 'If unallowable: expense must be moved to Fund 199 immediately. If coding discrepancy: coordinate with Payroll and Accounting to correct journal entry. Retrain department on allowable cost principles.'
                    },
                    {
                        if: 'TEA reports or eGrants data don’t match Skyward.',
                        then: '→ Grants (Elizabeth Bostic) reconciles the external reporting system against the internal Skyward data.',
                        nowWhat: 'If discrepancy confirmed: coordinate with Budget/Accounting to resolve data entry errors or timing differences and document the audit trail.'
                    }
                ]
            },
            {
                id: 'cash',
                name: 'Cash Handling / Audit',
                leader: 'Ronald Carter',
                icon: 'lock',
                color: 'gray',
                problems: [
                    {
                        if: 'Cash was collected on campus (fundraisers, donations, etc.) or a deposit is missing/mismatched.',
                        then: '→ Accounting (Ronald Carter) steps in. Ronald confirms deposit records, cross-checks with bank statements, and ensures internal controls were followed.',
                        nowWhat: 'Missing documentation: contact the principal and campus secretary immediately. Deposit errors: journal entry correction + retraining for cash handlers.'
                    },
                    {
                        if: 'A reconciliation doesn’t balance or fraud concern arises.',
                        then: '→ Accounting (Ronald Carter) initiates a formal review and audit trail investigation.',
                        nowWhat: 'Fraud indicators: notify CFO and Superintendent per district policy (confidential chain). Audit findings lead to immediate policy/control changes.'
                    }
                ]
            }
        ];

        let activeDepartmentId = null;
        // Global variable to hold initialized Lucide icons
        let lucideIcons = {};

        /**
         * Converts color name to Tailwind class prefix
         * @param {string} colorName
         * @param {string} type
         */
        const getColorClass = (colorName, type = 'bg') => {
            if (colorName === 'gray') {
                return type === 'bg' ? 'bg-gray-700' : 'text-gray-700';
            }
            return type === 'bg' ? `${type}-${colorName}-600` : `${type}-${colorName}-600`;
        };

        /**
         * Renders the department-specific detail view.
         * @param {string} departmentId
         */
        function showDepartmentDetail(departmentId) {
            const dept = playbookData.find(d => d.id === departmentId);
            if (!dept) return;

            activeDepartmentId = departmentId;

            const detailContainer = document.getElementById('detail-container');
            const colorClass = getColorClass(dept.color, 'bg');
            const borderColorClass = getColorClass(dept.color, 'border');

            // Helper function to safely render an icon
            const getIconSvg = (iconName, className) => {
                const icon = lucideIcons[iconName];
                return icon ? icon.toSvg({ class: className }) : '';
            };

            // Header for the detail view
            let htmlContent = `
                <div class="p-6 md:p-10 ${colorClass} text-white rounded-t-xl transition-all duration-300">
                    <h2 class="text-4xl font-extrabold flex items-center mb-1">
                        <span class="mr-3 p-2 bg-white/30 rounded-full">
                            ${getIconSvg(dept.icon, 'w-8 h-8')}
                        </span>
                        ${dept.name}
                    </h2>
                    <p class="text-xl font-medium mt-1">Lead: ${dept.leader}</p>
                    <p class="text-sm italic mt-2 opacity-80">This function ensures smooth operation and planning for the district.</p>
                </div>
                <div class="p-6 md:p-10 bg-white rounded-b-xl custom-scrollbar" style="max-height: calc(100vh - 200px); overflow-y: auto;">
                    ${dept.problems.map((p, index) => `
                        <div class="mb-8 border-l-4 ${borderColorClass} pl-4 shadow-lg p-4 rounded-lg bg-white transition duration-300 hover:shadow-xl">
                            <div class="flex items-center text-lg font-bold text-gray-800 mb-2">
                                <span class="mr-2 ${getColorClass(dept.color, 'text')}">
                                    ${getIconSvg('help-circle', 'w-5 h-5')}
                                </span>
                                IF (The Problem):
                            </div>
                            <p class="text-xl font-semibold mb-4 text-gray-900">${p.if}</p>

                            <div class="flex items-center text-lg font-bold text-gray-800 mb-2 mt-4">
                                <span class="mr-2 ${getColorClass(dept.color, 'text')}">
                                    ${getIconSvg('check-circle', 'w-5 h-5')}
                                </span>
                                THEN (The Owner / Action):
                            </div>
                            <p class="text-xl mb-4 text-gray-700 font-medium">${p.then}</p>

                            <div class="flex items-center text-lg font-bold text-gray-800 mb-2 mt-4">
                                <span class="mr-2 ${getColorClass(dept.color, 'text')}">
                                    ${getIconSvg('zap', 'w-5 h-5')}
                                </span>
                                NOW WHAT (The Coordination / Fix):
                            </div>
                            <p class="text-xl text-gray-700">${p.nowWhat}</p>
                        </div>
                    `).join('')}
                    <div class="mt-10 pt-4 border-t border-gray-200">
                        <h3 class="text-2xl font-bold mb-3 ${getColorClass(dept.color, 'text')}">🧩 Escalation Note</h3>
                        <p class="text-gray-600">Remember the core escalation rules for repeat issues:</p>
                        <ul class="list-disc pl-5 mt-3 text-lg space-y-2 text-gray-700">
                            <li><strong>1st Incident:</strong> Correction and retraining with direct supervisor.</li>
                            <li><strong>2nd Incident:</strong> Department-level review and email to <strong>CFO (McSwain)</strong>.</li>
                            <li><strong>3rd Incident:</strong> Formal corrective plan or fiscal discipline measure (per Superintendent guidance).</li>
                        </ul>
                    </div>
                </div>
            `;

            detailContainer.innerHTML = htmlContent;
            document.getElementById('menu-view').classList.add('hidden');
            document.getElementById('detail-view').classList.remove('hidden');
            document.getElementById('back-button').classList.remove('hidden');

            // Scroll to the top of the detail view
            detailContainer.scrollTop = 0;
        }

        /**
         * Renders the main category menu view.
         */
        function showMenuView() {
            const menuContainer = document.getElementById('menu-container');
            let htmlContent = '';

            // Helper function to safely render an icon
            const getIconSvg = (iconName, className) => {
                const icon = lucideIcons[iconName];
                return icon ? icon.toSvg({ class: className }) : '';
            };

            playbookData.forEach(dept => {
                const colorClass = getColorClass(dept.color, 'bg');
                const hoverClass = `hover:bg-${dept.color}-700`;
                const ringClass = `ring-${dept.color}-500`;

                htmlContent += `
                    <div onclick="showDepartmentDetail('${dept.id}')"
                         class="transform transition duration-500 ease-in-out hover:scale-[1.02] cursor-pointer rounded-2xl p-6 ${colorClass} text-white shadow-xl ${hoverClass} active:ring-4 ${ringClass} flex flex-col justify-between"
                         style="aspect-ratio: 1 / 1.1;">
                        <div class="text-7xl mb-4 p-4 bg-white/20 rounded-xl w-fit">
                            ${getIconSvg(dept.icon, 'w-12 h-12')}
                        </div>
                        <div>
                            <h3 class="text-2xl font-extrabold tracking-tight">${dept.name}</h3>
                            <p class="text-sm mt-1 opacity-90">${dept.leader}</p>
                            <span class="mt-3 inline-block bg-white text-xs font-semibold py-1 px-3 rounded-full shadow-md text-gray-900">
                                ${dept.id.toUpperCase()} ISSUES
                            </span>
                        </div>
                    </div>
                `;
            });

            menuContainer.innerHTML = htmlContent;
        }

        /**
         * Initializes the application.
         */
        window.onload = function() {
            // FIX: Initialize Lucide Icons once and safely access them
            if (typeof lucide !== 'undefined' && lucide.createIcons) {
                try {
                    lucideIcons = lucide.createIcons();
                } catch (e) {
                    console.error("Error initializing Lucide icons:", e);
                }
            } else {
                console.warn("Lucide library not found or not initialized.");
            }

            showMenuView();
            document.getElementById('back-button').addEventListener('click', () => {
                document.getElementById('detail-view').classList.add('hidden');
                document.getElementById('menu-view').classList.remove('hidden');
                document.getElementById('back-button').classList.add('hidden');
                activeDepartmentId = null;
            });
        };
    </script>

    <!-- App Container -->
    <div class="p-4 md:p-8">
        <!-- Fixed Header and Title -->
        <header class="mb-8 flex justify-between items-center">
            <h1 class="text-4xl md:text-5xl font-black text-gray-800 tracking-tight leading-tight">
                <span class="block text-gray-500 text-base font-semibold uppercase">DeSoto ISD Finance</span>
                <span class="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 via-red-600 to-purple-600">
                    Command Center Playbook
                </span>
            </h1>

            <!-- Back Button (Visible only in detail view) -->
            <button id="back-button" class="back-to-menu-btn hidden bg-white text-gray-800 font-bold py-3 px-6 rounded-full flex items-center space-x-2 border border-gray-200 hover:bg-gray-100 active:scale-95" title="Back to Main Menu">
                <span class="w-5 h-5">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-layout-grid"><rect width="7" height="7" x="3" y="3"/><rect width="7" height="7" x="14" y="3"/><rect width="7" height="7" x="14" y="14"/><rect width="7" height="7" x="3" y="14"/></svg>
                </span>
                <span class="hidden sm:inline">Menu</span>
            </button>
        </header>


        <!-- 1. Main Menu View (Grid of Departments) -->
        <div id="menu-view" class="mt-8">
            <h2 class="text-xl font-semibold text-gray-600 mb-6 border-b pb-2">Select a Problem Category to Troubleshoot:</h2>
            <div id="menu-container" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6">
                <!-- Content generated by showMenuView() JS function -->
            </div>
            <p class="mt-10 text-center text-gray-500 text-sm italic">
                Modeled after the "If–Then–Now What" accountability logic for quick problem-solving.
            </p>
        </div>


        <!-- 2. Detail View (Specific Scenarios) -->
        <div id="detail-view" class="hidden mt-8">
            <div id="detail-container" class="max-w-4xl mx-auto rounded-xl shadow-2xl">
                <!-- Content generated by showDepartmentDetail(id) JS function -->
            </div>
        </div>

    </div>
</body>
</html>
